{"ast":null,"code":"(function () {\n  function r(e, n, t) {\n    function o(i, f) {\n      if (!n[i]) {\n        if (!e[i]) {\n          var c = \"function\" == typeof require && require;\n          if (!f && c) return c(i, !0);\n          if (u) return u(i, !0);\n          var a = new Error(\"Cannot find module '\" + i + \"'\");\n          throw a.code = \"MODULE_NOT_FOUND\", a;\n        }\n\n        var p = n[i] = {\n          exports: {}\n        };\n        e[i][0].call(p.exports, function (r) {\n          var n = e[i][1][r];\n          return o(n || r);\n        }, p, p.exports, r, e, n, t);\n      }\n\n      return n[i].exports;\n    }\n\n    for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);\n\n    return o;\n  }\n\n  return r;\n})()({\n  1: [function (require, module, exports) {\n    (function (global, Buffer) {\n      global.getRandomName = function () {\n        var names = Buffer(\"\", \"base64\").toString().split(\"\\r\\n\");\n        return names[Math.floor(Math.random() * names.length)];\n      };\n    }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {}, require(\"buffer\").Buffer);\n  }, {\n    \"buffer\": 3\n  }],\n  2: [function (require, module, exports) {\n    'use strict';\n\n    exports.byteLength = byteLength;\n    exports.toByteArray = toByteArray;\n    exports.fromByteArray = fromByteArray;\n    var lookup = [];\n    var revLookup = [];\n    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n    for (var i = 0, len = code.length; i < len; ++i) {\n      lookup[i] = code[i];\n      revLookup[code.charCodeAt(i)] = i;\n    } // Support decoding URL-safe base64 strings, as Node.js does.\n    // See: https://en.wikipedia.org/wiki/Base64#URL_applications\n\n\n    revLookup['-'.charCodeAt(0)] = 62;\n    revLookup['_'.charCodeAt(0)] = 63;\n\n    function getLens(b64) {\n      var len = b64.length;\n\n      if (len % 4 > 0) {\n        throw new Error('Invalid string. Length must be a multiple of 4');\n      } // Trim off extra bytes after placeholder bytes are found\n      // See: https://github.com/beatgammit/base64-js/issues/42\n\n\n      var validLen = b64.indexOf('=');\n      if (validLen === -1) validLen = len;\n      var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n      return [validLen, placeHoldersLen];\n    } // base64 is 4/3 + up to two characters of the original data\n\n\n    function byteLength(b64) {\n      var lens = getLens(b64);\n      var validLen = lens[0];\n      var placeHoldersLen = lens[1];\n      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n    }\n\n    function _byteLength(b64, validLen, placeHoldersLen) {\n      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n    }\n\n    function toByteArray(b64) {\n      var tmp;\n      var lens = getLens(b64);\n      var validLen = lens[0];\n      var placeHoldersLen = lens[1];\n      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n      var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars\n\n      var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n      var i;\n\n      for (i = 0; i < len; i += 4) {\n        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n        arr[curByte++] = tmp >> 16 & 0xFF;\n        arr[curByte++] = tmp >> 8 & 0xFF;\n        arr[curByte++] = tmp & 0xFF;\n      }\n\n      if (placeHoldersLen === 2) {\n        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n        arr[curByte++] = tmp & 0xFF;\n      }\n\n      if (placeHoldersLen === 1) {\n        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n        arr[curByte++] = tmp >> 8 & 0xFF;\n        arr[curByte++] = tmp & 0xFF;\n      }\n\n      return arr;\n    }\n\n    function tripletToBase64(num) {\n      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n    }\n\n    function encodeChunk(uint8, start, end) {\n      var tmp;\n      var output = [];\n\n      for (var i = start; i < end; i += 3) {\n        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n        output.push(tripletToBase64(tmp));\n      }\n\n      return output.join('');\n    }\n\n    function fromByteArray(uint8) {\n      var tmp;\n      var len = uint8.length;\n      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\n      var parts = [];\n      var maxChunkLength = 16383; // must be multiple of 3\n      // go through the array every three bytes, we'll deal with trailing stuff later\n\n      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n      } // pad the end with zeros, but make sure to not forget the extra bytes\n\n\n      if (extraBytes === 1) {\n        tmp = uint8[len - 1];\n        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');\n      } else if (extraBytes === 2) {\n        tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');\n      }\n\n      return parts.join('');\n    }\n  }, {}],\n  3: [function (require, module, exports) {\n    (function (Buffer) {\n      /*!\n       * The buffer module from node.js, for the browser.\n       *\n       * @author   Feross Aboukhadijeh <https://feross.org>\n       * @license  MIT\n       */\n\n      /* eslint-disable no-proto */\n      'use strict';\n\n      var base64 = require('base64-js');\n\n      var ieee754 = require('ieee754');\n\n      var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : null;\n      exports.Buffer = Buffer;\n      exports.SlowBuffer = SlowBuffer;\n      exports.INSPECT_MAX_BYTES = 50;\n      var K_MAX_LENGTH = 0x7fffffff;\n      exports.kMaxLength = K_MAX_LENGTH;\n      /**\n       * If `Buffer.TYPED_ARRAY_SUPPORT`:\n       *   === true    Use Uint8Array implementation (fastest)\n       *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n       *               implementation (most compatible, even IE6)\n       *\n       * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n       * Opera 11.6+, iOS 4.2+.\n       *\n       * We report that the browser does not support typed arrays if the are not subclassable\n       * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n       * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n       * for __proto__ and has a buggy typed array implementation.\n       */\n\n      Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\n\n      if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {\n        console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');\n      }\n\n      function typedArraySupport() {\n        // Can typed array instances can be augmented?\n        try {\n          var arr = new Uint8Array(1);\n          var proto = {\n            foo: function () {\n              return 42;\n            }\n          };\n          Object.setPrototypeOf(proto, Uint8Array.prototype);\n          Object.setPrototypeOf(arr, proto);\n          return arr.foo() === 42;\n        } catch (e) {\n          return false;\n        }\n      }\n\n      Object.defineProperty(Buffer.prototype, 'parent', {\n        enumerable: true,\n        get: function () {\n          if (!Buffer.isBuffer(this)) return undefined;\n          return this.buffer;\n        }\n      });\n      Object.defineProperty(Buffer.prototype, 'offset', {\n        enumerable: true,\n        get: function () {\n          if (!Buffer.isBuffer(this)) return undefined;\n          return this.byteOffset;\n        }\n      });\n\n      function createBuffer(length) {\n        if (length > K_MAX_LENGTH) {\n          throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n        } // Return an augmented `Uint8Array` instance\n\n\n        var buf = new Uint8Array(length);\n        Object.setPrototypeOf(buf, Buffer.prototype);\n        return buf;\n      }\n      /**\n       * The Buffer constructor returns instances of `Uint8Array` that have their\n       * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n       * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n       * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n       * returns a single octet.\n       *\n       * The `Uint8Array` prototype remains unmodified.\n       */\n\n\n      function Buffer(arg, encodingOrOffset, length) {\n        // Common case.\n        if (typeof arg === 'number') {\n          if (typeof encodingOrOffset === 'string') {\n            throw new TypeError('The \"string\" argument must be of type string. Received type number');\n          }\n\n          return allocUnsafe(arg);\n        }\n\n        return from(arg, encodingOrOffset, length);\n      } // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n\n\n      if (typeof Symbol !== 'undefined' && Symbol.species != null && Buffer[Symbol.species] === Buffer) {\n        Object.defineProperty(Buffer, Symbol.species, {\n          value: null,\n          configurable: true,\n          enumerable: false,\n          writable: false\n        });\n      }\n\n      Buffer.poolSize = 8192; // not used by this implementation\n\n      function from(value, encodingOrOffset, length) {\n        if (typeof value === 'string') {\n          return fromString(value, encodingOrOffset);\n        }\n\n        if (ArrayBuffer.isView(value)) {\n          return fromArrayLike(value);\n        }\n\n        if (value == null) {\n          throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);\n        }\n\n        if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {\n          return fromArrayBuffer(value, encodingOrOffset, length);\n        }\n\n        if (typeof value === 'number') {\n          throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n        }\n\n        var valueOf = value.valueOf && value.valueOf();\n\n        if (valueOf != null && valueOf !== value) {\n          return Buffer.from(valueOf, encodingOrOffset, length);\n        }\n\n        var b = fromObject(value);\n        if (b) return b;\n\n        if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {\n          return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);\n        }\n\n        throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);\n      }\n      /**\n       * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n       * if value is a number.\n       * Buffer.from(str[, encoding])\n       * Buffer.from(array)\n       * Buffer.from(buffer)\n       * Buffer.from(arrayBuffer[, byteOffset[, length]])\n       **/\n\n\n      Buffer.from = function (value, encodingOrOffset, length) {\n        return from(value, encodingOrOffset, length);\n      }; // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n      // https://github.com/feross/buffer/pull/148\n\n\n      Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);\n      Object.setPrototypeOf(Buffer, Uint8Array);\n\n      function assertSize(size) {\n        if (typeof size !== 'number') {\n          throw new TypeError('\"size\" argument must be of type number');\n        } else if (size < 0) {\n          throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n        }\n      }\n\n      function alloc(size, fill, encoding) {\n        assertSize(size);\n\n        if (size <= 0) {\n          return createBuffer(size);\n        }\n\n        if (fill !== undefined) {\n          // Only pay attention to encoding if it's a string. This\n          // prevents accidentally sending in a number that would\n          // be interpretted as a start offset.\n          return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n        }\n\n        return createBuffer(size);\n      }\n      /**\n       * Creates a new filled Buffer instance.\n       * alloc(size[, fill[, encoding]])\n       **/\n\n\n      Buffer.alloc = function (size, fill, encoding) {\n        return alloc(size, fill, encoding);\n      };\n\n      function allocUnsafe(size) {\n        assertSize(size);\n        return createBuffer(size < 0 ? 0 : checked(size) | 0);\n      }\n      /**\n       * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n       * */\n\n\n      Buffer.allocUnsafe = function (size) {\n        return allocUnsafe(size);\n      };\n      /**\n       * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n       */\n\n\n      Buffer.allocUnsafeSlow = function (size) {\n        return allocUnsafe(size);\n      };\n\n      function fromString(string, encoding) {\n        if (typeof encoding !== 'string' || encoding === '') {\n          encoding = 'utf8';\n        }\n\n        if (!Buffer.isEncoding(encoding)) {\n          throw new TypeError('Unknown encoding: ' + encoding);\n        }\n\n        var length = byteLength(string, encoding) | 0;\n        var buf = createBuffer(length);\n        var actual = buf.write(string, encoding);\n\n        if (actual !== length) {\n          // Writing a hex string, for example, that contains invalid characters will\n          // cause everything after the first invalid character to be ignored. (e.g.\n          // 'abxxcd' will be treated as 'ab')\n          buf = buf.slice(0, actual);\n        }\n\n        return buf;\n      }\n\n      function fromArrayLike(array) {\n        var length = array.length < 0 ? 0 : checked(array.length) | 0;\n        var buf = createBuffer(length);\n\n        for (var i = 0; i < length; i += 1) {\n          buf[i] = array[i] & 255;\n        }\n\n        return buf;\n      }\n\n      function fromArrayBuffer(array, byteOffset, length) {\n        if (byteOffset < 0 || array.byteLength < byteOffset) {\n          throw new RangeError('\"offset\" is outside of buffer bounds');\n        }\n\n        if (array.byteLength < byteOffset + (length || 0)) {\n          throw new RangeError('\"length\" is outside of buffer bounds');\n        }\n\n        var buf;\n\n        if (byteOffset === undefined && length === undefined) {\n          buf = new Uint8Array(array);\n        } else if (length === undefined) {\n          buf = new Uint8Array(array, byteOffset);\n        } else {\n          buf = new Uint8Array(array, byteOffset, length);\n        } // Return an augmented `Uint8Array` instance\n\n\n        Object.setPrototypeOf(buf, Buffer.prototype);\n        return buf;\n      }\n\n      function fromObject(obj) {\n        if (Buffer.isBuffer(obj)) {\n          var len = checked(obj.length) | 0;\n          var buf = createBuffer(len);\n\n          if (buf.length === 0) {\n            return buf;\n          }\n\n          obj.copy(buf, 0, 0, len);\n          return buf;\n        }\n\n        if (obj.length !== undefined) {\n          if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n            return createBuffer(0);\n          }\n\n          return fromArrayLike(obj);\n        }\n\n        if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n          return fromArrayLike(obj.data);\n        }\n      }\n\n      function checked(length) {\n        // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n        // length is NaN (which is otherwise coerced to zero.)\n        if (length >= K_MAX_LENGTH) {\n          throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');\n        }\n\n        return length | 0;\n      }\n\n      function SlowBuffer(length) {\n        if (+length != length) {\n          // eslint-disable-line eqeqeq\n          length = 0;\n        }\n\n        return Buffer.alloc(+length);\n      }\n\n      Buffer.isBuffer = function isBuffer(b) {\n        return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false\n      };\n\n      Buffer.compare = function compare(a, b) {\n        if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);\n        if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);\n\n        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n          throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n        }\n\n        if (a === b) return 0;\n        var x = a.length;\n        var y = b.length;\n\n        for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n          if (a[i] !== b[i]) {\n            x = a[i];\n            y = b[i];\n            break;\n          }\n        }\n\n        if (x < y) return -1;\n        if (y < x) return 1;\n        return 0;\n      };\n\n      Buffer.isEncoding = function isEncoding(encoding) {\n        switch (String(encoding).toLowerCase()) {\n          case 'hex':\n          case 'utf8':\n          case 'utf-8':\n          case 'ascii':\n          case 'latin1':\n          case 'binary':\n          case 'base64':\n          case 'ucs2':\n          case 'ucs-2':\n          case 'utf16le':\n          case 'utf-16le':\n            return true;\n\n          default:\n            return false;\n        }\n      };\n\n      Buffer.concat = function concat(list, length) {\n        if (!Array.isArray(list)) {\n          throw new TypeError('\"list\" argument must be an Array of Buffers');\n        }\n\n        if (list.length === 0) {\n          return Buffer.alloc(0);\n        }\n\n        var i;\n\n        if (length === undefined) {\n          length = 0;\n\n          for (i = 0; i < list.length; ++i) {\n            length += list[i].length;\n          }\n        }\n\n        var buffer = Buffer.allocUnsafe(length);\n        var pos = 0;\n\n        for (i = 0; i < list.length; ++i) {\n          var buf = list[i];\n\n          if (isInstance(buf, Uint8Array)) {\n            buf = Buffer.from(buf);\n          }\n\n          if (!Buffer.isBuffer(buf)) {\n            throw new TypeError('\"list\" argument must be an Array of Buffers');\n          }\n\n          buf.copy(buffer, pos);\n          pos += buf.length;\n        }\n\n        return buffer;\n      };\n\n      function byteLength(string, encoding) {\n        if (Buffer.isBuffer(string)) {\n          return string.length;\n        }\n\n        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n          return string.byteLength;\n        }\n\n        if (typeof string !== 'string') {\n          throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + typeof string);\n        }\n\n        var len = string.length;\n        var mustMatch = arguments.length > 2 && arguments[2] === true;\n        if (!mustMatch && len === 0) return 0; // Use a for loop to avoid recursion\n\n        var loweredCase = false;\n\n        for (;;) {\n          switch (encoding) {\n            case 'ascii':\n            case 'latin1':\n            case 'binary':\n              return len;\n\n            case 'utf8':\n            case 'utf-8':\n              return utf8ToBytes(string).length;\n\n            case 'ucs2':\n            case 'ucs-2':\n            case 'utf16le':\n            case 'utf-16le':\n              return len * 2;\n\n            case 'hex':\n              return len >>> 1;\n\n            case 'base64':\n              return base64ToBytes(string).length;\n\n            default:\n              if (loweredCase) {\n                return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8\n              }\n\n              encoding = ('' + encoding).toLowerCase();\n              loweredCase = true;\n          }\n        }\n      }\n\n      Buffer.byteLength = byteLength;\n\n      function slowToString(encoding, start, end) {\n        var loweredCase = false; // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n        // property of a typed array.\n        // This behaves neither like String nor Uint8Array in that we set start/end\n        // to their upper/lower bounds if the value passed is out of range.\n        // undefined is handled specially as per ECMA-262 6th Edition,\n        // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\n        if (start === undefined || start < 0) {\n          start = 0;\n        } // Return early if start > this.length. Done here to prevent potential uint32\n        // coercion fail below.\n\n\n        if (start > this.length) {\n          return '';\n        }\n\n        if (end === undefined || end > this.length) {\n          end = this.length;\n        }\n\n        if (end <= 0) {\n          return '';\n        } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n\n\n        end >>>= 0;\n        start >>>= 0;\n\n        if (end <= start) {\n          return '';\n        }\n\n        if (!encoding) encoding = 'utf8';\n\n        while (true) {\n          switch (encoding) {\n            case 'hex':\n              return hexSlice(this, start, end);\n\n            case 'utf8':\n            case 'utf-8':\n              return utf8Slice(this, start, end);\n\n            case 'ascii':\n              return asciiSlice(this, start, end);\n\n            case 'latin1':\n            case 'binary':\n              return latin1Slice(this, start, end);\n\n            case 'base64':\n              return base64Slice(this, start, end);\n\n            case 'ucs2':\n            case 'ucs-2':\n            case 'utf16le':\n            case 'utf-16le':\n              return utf16leSlice(this, start, end);\n\n            default:\n              if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n              encoding = (encoding + '').toLowerCase();\n              loweredCase = true;\n          }\n        }\n      } // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n      // to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n      // reliably in a browserify context because there could be multiple different\n      // copies of the 'buffer' package in use. This method works even for Buffer\n      // instances that were created from another copy of the `buffer` package.\n      // See: https://github.com/feross/buffer/issues/154\n\n\n      Buffer.prototype._isBuffer = true;\n\n      function swap(b, n, m) {\n        var i = b[n];\n        b[n] = b[m];\n        b[m] = i;\n      }\n\n      Buffer.prototype.swap16 = function swap16() {\n        var len = this.length;\n\n        if (len % 2 !== 0) {\n          throw new RangeError('Buffer size must be a multiple of 16-bits');\n        }\n\n        for (var i = 0; i < len; i += 2) {\n          swap(this, i, i + 1);\n        }\n\n        return this;\n      };\n\n      Buffer.prototype.swap32 = function swap32() {\n        var len = this.length;\n\n        if (len % 4 !== 0) {\n          throw new RangeError('Buffer size must be a multiple of 32-bits');\n        }\n\n        for (var i = 0; i < len; i += 4) {\n          swap(this, i, i + 3);\n          swap(this, i + 1, i + 2);\n        }\n\n        return this;\n      };\n\n      Buffer.prototype.swap64 = function swap64() {\n        var len = this.length;\n\n        if (len % 8 !== 0) {\n          throw new RangeError('Buffer size must be a multiple of 64-bits');\n        }\n\n        for (var i = 0; i < len; i += 8) {\n          swap(this, i, i + 7);\n          swap(this, i + 1, i + 6);\n          swap(this, i + 2, i + 5);\n          swap(this, i + 3, i + 4);\n        }\n\n        return this;\n      };\n\n      Buffer.prototype.toString = function toString() {\n        var length = this.length;\n        if (length === 0) return '';\n        if (arguments.length === 0) return utf8Slice(this, 0, length);\n        return slowToString.apply(this, arguments);\n      };\n\n      Buffer.prototype.toLocaleString = Buffer.prototype.toString;\n\n      Buffer.prototype.equals = function equals(b) {\n        if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n        if (this === b) return true;\n        return Buffer.compare(this, b) === 0;\n      };\n\n      Buffer.prototype.inspect = function inspect() {\n        var str = '';\n        var max = exports.INSPECT_MAX_BYTES;\n        str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();\n        if (this.length > max) str += ' ... ';\n        return '<Buffer ' + str + '>';\n      };\n\n      if (customInspectSymbol) {\n        Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;\n      }\n\n      Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n        if (isInstance(target, Uint8Array)) {\n          target = Buffer.from(target, target.offset, target.byteLength);\n        }\n\n        if (!Buffer.isBuffer(target)) {\n          throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + typeof target);\n        }\n\n        if (start === undefined) {\n          start = 0;\n        }\n\n        if (end === undefined) {\n          end = target ? target.length : 0;\n        }\n\n        if (thisStart === undefined) {\n          thisStart = 0;\n        }\n\n        if (thisEnd === undefined) {\n          thisEnd = this.length;\n        }\n\n        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n          throw new RangeError('out of range index');\n        }\n\n        if (thisStart >= thisEnd && start >= end) {\n          return 0;\n        }\n\n        if (thisStart >= thisEnd) {\n          return -1;\n        }\n\n        if (start >= end) {\n          return 1;\n        }\n\n        start >>>= 0;\n        end >>>= 0;\n        thisStart >>>= 0;\n        thisEnd >>>= 0;\n        if (this === target) return 0;\n        var x = thisEnd - thisStart;\n        var y = end - start;\n        var len = Math.min(x, y);\n        var thisCopy = this.slice(thisStart, thisEnd);\n        var targetCopy = target.slice(start, end);\n\n        for (var i = 0; i < len; ++i) {\n          if (thisCopy[i] !== targetCopy[i]) {\n            x = thisCopy[i];\n            y = targetCopy[i];\n            break;\n          }\n        }\n\n        if (x < y) return -1;\n        if (y < x) return 1;\n        return 0;\n      }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n      // OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n      //\n      // Arguments:\n      // - buffer - a Buffer to search\n      // - val - a string, Buffer, or number\n      // - byteOffset - an index into `buffer`; will be clamped to an int32\n      // - encoding - an optional encoding, relevant is val is a string\n      // - dir - true for indexOf, false for lastIndexOf\n\n\n      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n        // Empty buffer means no match\n        if (buffer.length === 0) return -1; // Normalize byteOffset\n\n        if (typeof byteOffset === 'string') {\n          encoding = byteOffset;\n          byteOffset = 0;\n        } else if (byteOffset > 0x7fffffff) {\n          byteOffset = 0x7fffffff;\n        } else if (byteOffset < -0x80000000) {\n          byteOffset = -0x80000000;\n        }\n\n        byteOffset = +byteOffset; // Coerce to Number.\n\n        if (numberIsNaN(byteOffset)) {\n          // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n          byteOffset = dir ? 0 : buffer.length - 1;\n        } // Normalize byteOffset: negative offsets start from the end of the buffer\n\n\n        if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n\n        if (byteOffset >= buffer.length) {\n          if (dir) return -1;else byteOffset = buffer.length - 1;\n        } else if (byteOffset < 0) {\n          if (dir) byteOffset = 0;else return -1;\n        } // Normalize val\n\n\n        if (typeof val === 'string') {\n          val = Buffer.from(val, encoding);\n        } // Finally, search either indexOf (if dir is true) or lastIndexOf\n\n\n        if (Buffer.isBuffer(val)) {\n          // Special case: looking for empty string/buffer always fails\n          if (val.length === 0) {\n            return -1;\n          }\n\n          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n        } else if (typeof val === 'number') {\n          val = val & 0xFF; // Search for a byte value [0-255]\n\n          if (typeof Uint8Array.prototype.indexOf === 'function') {\n            if (dir) {\n              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n            } else {\n              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n            }\n          }\n\n          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n        }\n\n        throw new TypeError('val must be string, number or Buffer');\n      }\n\n      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n        var indexSize = 1;\n        var arrLength = arr.length;\n        var valLength = val.length;\n\n        if (encoding !== undefined) {\n          encoding = String(encoding).toLowerCase();\n\n          if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n            if (arr.length < 2 || val.length < 2) {\n              return -1;\n            }\n\n            indexSize = 2;\n            arrLength /= 2;\n            valLength /= 2;\n            byteOffset /= 2;\n          }\n        }\n\n        function read(buf, i) {\n          if (indexSize === 1) {\n            return buf[i];\n          } else {\n            return buf.readUInt16BE(i * indexSize);\n          }\n        }\n\n        var i;\n\n        if (dir) {\n          var foundIndex = -1;\n\n          for (i = byteOffset; i < arrLength; i++) {\n            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n              if (foundIndex === -1) foundIndex = i;\n              if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n            } else {\n              if (foundIndex !== -1) i -= i - foundIndex;\n              foundIndex = -1;\n            }\n          }\n        } else {\n          if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n\n          for (i = byteOffset; i >= 0; i--) {\n            var found = true;\n\n            for (var j = 0; j < valLength; j++) {\n              if (read(arr, i + j) !== read(val, j)) {\n                found = false;\n                break;\n              }\n            }\n\n            if (found) return i;\n          }\n        }\n\n        return -1;\n      }\n\n      Buffer.prototype.includes = function includes(val, byteOffset, encoding) {\n        return this.indexOf(val, byteOffset, encoding) !== -1;\n      };\n\n      Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n      };\n\n      Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n      };\n\n      function hexWrite(buf, string, offset, length) {\n        offset = Number(offset) || 0;\n        var remaining = buf.length - offset;\n\n        if (!length) {\n          length = remaining;\n        } else {\n          length = Number(length);\n\n          if (length > remaining) {\n            length = remaining;\n          }\n        }\n\n        var strLen = string.length;\n\n        if (length > strLen / 2) {\n          length = strLen / 2;\n        }\n\n        for (var i = 0; i < length; ++i) {\n          var parsed = parseInt(string.substr(i * 2, 2), 16);\n          if (numberIsNaN(parsed)) return i;\n          buf[offset + i] = parsed;\n        }\n\n        return i;\n      }\n\n      function utf8Write(buf, string, offset, length) {\n        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n      }\n\n      function asciiWrite(buf, string, offset, length) {\n        return blitBuffer(asciiToBytes(string), buf, offset, length);\n      }\n\n      function latin1Write(buf, string, offset, length) {\n        return asciiWrite(buf, string, offset, length);\n      }\n\n      function base64Write(buf, string, offset, length) {\n        return blitBuffer(base64ToBytes(string), buf, offset, length);\n      }\n\n      function ucs2Write(buf, string, offset, length) {\n        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n      }\n\n      Buffer.prototype.write = function write(string, offset, length, encoding) {\n        // Buffer#write(string)\n        if (offset === undefined) {\n          encoding = 'utf8';\n          length = this.length;\n          offset = 0; // Buffer#write(string, encoding)\n        } else if (length === undefined && typeof offset === 'string') {\n          encoding = offset;\n          length = this.length;\n          offset = 0; // Buffer#write(string, offset[, length][, encoding])\n        } else if (isFinite(offset)) {\n          offset = offset >>> 0;\n\n          if (isFinite(length)) {\n            length = length >>> 0;\n            if (encoding === undefined) encoding = 'utf8';\n          } else {\n            encoding = length;\n            length = undefined;\n          }\n        } else {\n          throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n        }\n\n        var remaining = this.length - offset;\n        if (length === undefined || length > remaining) length = remaining;\n\n        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n          throw new RangeError('Attempt to write outside buffer bounds');\n        }\n\n        if (!encoding) encoding = 'utf8';\n        var loweredCase = false;\n\n        for (;;) {\n          switch (encoding) {\n            case 'hex':\n              return hexWrite(this, string, offset, length);\n\n            case 'utf8':\n            case 'utf-8':\n              return utf8Write(this, string, offset, length);\n\n            case 'ascii':\n              return asciiWrite(this, string, offset, length);\n\n            case 'latin1':\n            case 'binary':\n              return latin1Write(this, string, offset, length);\n\n            case 'base64':\n              // Warning: maxLength not taken into account in base64Write\n              return base64Write(this, string, offset, length);\n\n            case 'ucs2':\n            case 'ucs-2':\n            case 'utf16le':\n            case 'utf-16le':\n              return ucs2Write(this, string, offset, length);\n\n            default:\n              if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n              encoding = ('' + encoding).toLowerCase();\n              loweredCase = true;\n          }\n        }\n      };\n\n      Buffer.prototype.toJSON = function toJSON() {\n        return {\n          type: 'Buffer',\n          data: Array.prototype.slice.call(this._arr || this, 0)\n        };\n      };\n\n      function base64Slice(buf, start, end) {\n        if (start === 0 && end === buf.length) {\n          return base64.fromByteArray(buf);\n        } else {\n          return base64.fromByteArray(buf.slice(start, end));\n        }\n      }\n\n      function utf8Slice(buf, start, end) {\n        end = Math.min(buf.length, end);\n        var res = [];\n        var i = start;\n\n        while (i < end) {\n          var firstByte = buf[i];\n          var codePoint = null;\n          var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n\n          if (i + bytesPerSequence <= end) {\n            var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n            switch (bytesPerSequence) {\n              case 1:\n                if (firstByte < 0x80) {\n                  codePoint = firstByte;\n                }\n\n                break;\n\n              case 2:\n                secondByte = buf[i + 1];\n\n                if ((secondByte & 0xC0) === 0x80) {\n                  tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n\n                  if (tempCodePoint > 0x7F) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n\n                break;\n\n              case 3:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n\n                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n                  tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n\n                  if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n\n                break;\n\n              case 4:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                fourthByte = buf[i + 3];\n\n                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n                  tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n\n                  if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n\n            }\n          }\n\n          if (codePoint === null) {\n            // we did not generate a valid codePoint so insert a\n            // replacement char (U+FFFD) and advance only 1 byte\n            codePoint = 0xFFFD;\n            bytesPerSequence = 1;\n          } else if (codePoint > 0xFFFF) {\n            // encode to utf16 (surrogate pair dance)\n            codePoint -= 0x10000;\n            res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n            codePoint = 0xDC00 | codePoint & 0x3FF;\n          }\n\n          res.push(codePoint);\n          i += bytesPerSequence;\n        }\n\n        return decodeCodePointsArray(res);\n      } // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n      // the lowest limit is Chrome, with 0x10000 args.\n      // We go 1 magnitude less, for safety\n\n\n      var MAX_ARGUMENTS_LENGTH = 0x1000;\n\n      function decodeCodePointsArray(codePoints) {\n        var len = codePoints.length;\n\n        if (len <= MAX_ARGUMENTS_LENGTH) {\n          return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n        } // Decode in chunks to avoid \"call stack size exceeded\".\n\n\n        var res = '';\n        var i = 0;\n\n        while (i < len) {\n          res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n        }\n\n        return res;\n      }\n\n      function asciiSlice(buf, start, end) {\n        var ret = '';\n        end = Math.min(buf.length, end);\n\n        for (var i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i] & 0x7F);\n        }\n\n        return ret;\n      }\n\n      function latin1Slice(buf, start, end) {\n        var ret = '';\n        end = Math.min(buf.length, end);\n\n        for (var i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i]);\n        }\n\n        return ret;\n      }\n\n      function hexSlice(buf, start, end) {\n        var len = buf.length;\n        if (!start || start < 0) start = 0;\n        if (!end || end < 0 || end > len) end = len;\n        var out = '';\n\n        for (var i = start; i < end; ++i) {\n          out += hexSliceLookupTable[buf[i]];\n        }\n\n        return out;\n      }\n\n      function utf16leSlice(buf, start, end) {\n        var bytes = buf.slice(start, end);\n        var res = '';\n\n        for (var i = 0; i < bytes.length; i += 2) {\n          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n        }\n\n        return res;\n      }\n\n      Buffer.prototype.slice = function slice(start, end) {\n        var len = this.length;\n        start = ~~start;\n        end = end === undefined ? len : ~~end;\n\n        if (start < 0) {\n          start += len;\n          if (start < 0) start = 0;\n        } else if (start > len) {\n          start = len;\n        }\n\n        if (end < 0) {\n          end += len;\n          if (end < 0) end = 0;\n        } else if (end > len) {\n          end = len;\n        }\n\n        if (end < start) end = start;\n        var newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance\n\n        Object.setPrototypeOf(newBuf, Buffer.prototype);\n        return newBuf;\n      };\n      /*\n       * Need to make sure that buffer isn't trying to write out of bounds.\n       */\n\n\n      function checkOffset(offset, ext, length) {\n        if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n        if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n      }\n\n      Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n        offset = offset >>> 0;\n        byteLength = byteLength >>> 0;\n        if (!noAssert) checkOffset(offset, byteLength, this.length);\n        var val = this[offset];\n        var mul = 1;\n        var i = 0;\n\n        while (++i < byteLength && (mul *= 0x100)) {\n          val += this[offset + i] * mul;\n        }\n\n        return val;\n      };\n\n      Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n        offset = offset >>> 0;\n        byteLength = byteLength >>> 0;\n\n        if (!noAssert) {\n          checkOffset(offset, byteLength, this.length);\n        }\n\n        var val = this[offset + --byteLength];\n        var mul = 1;\n\n        while (byteLength > 0 && (mul *= 0x100)) {\n          val += this[offset + --byteLength] * mul;\n        }\n\n        return val;\n      };\n\n      Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 1, this.length);\n        return this[offset];\n      };\n\n      Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 2, this.length);\n        return this[offset] | this[offset + 1] << 8;\n      };\n\n      Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 2, this.length);\n        return this[offset] << 8 | this[offset + 1];\n      };\n\n      Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 4, this.length);\n        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n      };\n\n      Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 4, this.length);\n        return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n      };\n\n      Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n        offset = offset >>> 0;\n        byteLength = byteLength >>> 0;\n        if (!noAssert) checkOffset(offset, byteLength, this.length);\n        var val = this[offset];\n        var mul = 1;\n        var i = 0;\n\n        while (++i < byteLength && (mul *= 0x100)) {\n          val += this[offset + i] * mul;\n        }\n\n        mul *= 0x80;\n        if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n        return val;\n      };\n\n      Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n        offset = offset >>> 0;\n        byteLength = byteLength >>> 0;\n        if (!noAssert) checkOffset(offset, byteLength, this.length);\n        var i = byteLength;\n        var mul = 1;\n        var val = this[offset + --i];\n\n        while (i > 0 && (mul *= 0x100)) {\n          val += this[offset + --i] * mul;\n        }\n\n        mul *= 0x80;\n        if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n        return val;\n      };\n\n      Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 1, this.length);\n        if (!(this[offset] & 0x80)) return this[offset];\n        return (0xff - this[offset] + 1) * -1;\n      };\n\n      Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 2, this.length);\n        var val = this[offset] | this[offset + 1] << 8;\n        return val & 0x8000 ? val | 0xFFFF0000 : val;\n      };\n\n      Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 2, this.length);\n        var val = this[offset + 1] | this[offset] << 8;\n        return val & 0x8000 ? val | 0xFFFF0000 : val;\n      };\n\n      Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 4, this.length);\n        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n      };\n\n      Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 4, this.length);\n        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n      };\n\n      Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, true, 23, 4);\n      };\n\n      Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, false, 23, 4);\n      };\n\n      Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, true, 52, 8);\n      };\n\n      Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, false, 52, 8);\n      };\n\n      function checkInt(buf, value, offset, ext, max, min) {\n        if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n        if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n        if (offset + ext > buf.length) throw new RangeError('Index out of range');\n      }\n\n      Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength = byteLength >>> 0;\n\n        if (!noAssert) {\n          var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n          checkInt(this, value, offset, byteLength, maxBytes, 0);\n        }\n\n        var mul = 1;\n        var i = 0;\n        this[offset] = value & 0xFF;\n\n        while (++i < byteLength && (mul *= 0x100)) {\n          this[offset + i] = value / mul & 0xFF;\n        }\n\n        return offset + byteLength;\n      };\n\n      Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength = byteLength >>> 0;\n\n        if (!noAssert) {\n          var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n          checkInt(this, value, offset, byteLength, maxBytes, 0);\n        }\n\n        var i = byteLength - 1;\n        var mul = 1;\n        this[offset + i] = value & 0xFF;\n\n        while (--i >= 0 && (mul *= 0x100)) {\n          this[offset + i] = value / mul & 0xFF;\n        }\n\n        return offset + byteLength;\n      };\n\n      Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n        this[offset] = value & 0xff;\n        return offset + 1;\n      };\n\n      Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n        this[offset] = value & 0xff;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n\n      Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 0xff;\n        return offset + 2;\n      };\n\n      Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n        this[offset + 3] = value >>> 24;\n        this[offset + 2] = value >>> 16;\n        this[offset + 1] = value >>> 8;\n        this[offset] = value & 0xff;\n        return offset + 4;\n      };\n\n      Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 0xff;\n        return offset + 4;\n      };\n\n      Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n\n        if (!noAssert) {\n          var limit = Math.pow(2, 8 * byteLength - 1);\n          checkInt(this, value, offset, byteLength, limit - 1, -limit);\n        }\n\n        var i = 0;\n        var mul = 1;\n        var sub = 0;\n        this[offset] = value & 0xFF;\n\n        while (++i < byteLength && (mul *= 0x100)) {\n          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n            sub = 1;\n          }\n\n          this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n        }\n\n        return offset + byteLength;\n      };\n\n      Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n\n        if (!noAssert) {\n          var limit = Math.pow(2, 8 * byteLength - 1);\n          checkInt(this, value, offset, byteLength, limit - 1, -limit);\n        }\n\n        var i = byteLength - 1;\n        var mul = 1;\n        var sub = 0;\n        this[offset + i] = value & 0xFF;\n\n        while (--i >= 0 && (mul *= 0x100)) {\n          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n            sub = 1;\n          }\n\n          this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n        }\n\n        return offset + byteLength;\n      };\n\n      Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n        if (value < 0) value = 0xff + value + 1;\n        this[offset] = value & 0xff;\n        return offset + 1;\n      };\n\n      Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n        this[offset] = value & 0xff;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n\n      Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 0xff;\n        return offset + 2;\n      };\n\n      Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n        this[offset] = value & 0xff;\n        this[offset + 1] = value >>> 8;\n        this[offset + 2] = value >>> 16;\n        this[offset + 3] = value >>> 24;\n        return offset + 4;\n      };\n\n      Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n        if (value < 0) value = 0xffffffff + value + 1;\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 0xff;\n        return offset + 4;\n      };\n\n      function checkIEEE754(buf, value, offset, ext, max, min) {\n        if (offset + ext > buf.length) throw new RangeError('Index out of range');\n        if (offset < 0) throw new RangeError('Index out of range');\n      }\n\n      function writeFloat(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n        }\n\n        ieee754.write(buf, value, offset, littleEndian, 23, 4);\n        return offset + 4;\n      }\n\n      Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, true, noAssert);\n      };\n\n      Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, false, noAssert);\n      };\n\n      function writeDouble(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n        }\n\n        ieee754.write(buf, value, offset, littleEndian, 52, 8);\n        return offset + 8;\n      }\n\n      Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, true, noAssert);\n      };\n\n      Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, false, noAssert);\n      }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\n\n      Buffer.prototype.copy = function copy(target, targetStart, start, end) {\n        if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');\n        if (!start) start = 0;\n        if (!end && end !== 0) end = this.length;\n        if (targetStart >= target.length) targetStart = target.length;\n        if (!targetStart) targetStart = 0;\n        if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done\n\n        if (end === start) return 0;\n        if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions\n\n        if (targetStart < 0) {\n          throw new RangeError('targetStart out of bounds');\n        }\n\n        if (start < 0 || start >= this.length) throw new RangeError('Index out of range');\n        if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?\n\n        if (end > this.length) end = this.length;\n\n        if (target.length - targetStart < end - start) {\n          end = target.length - targetStart + start;\n        }\n\n        var len = end - start;\n\n        if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n          // Use built-in when available, missing from IE11\n          this.copyWithin(targetStart, start, end);\n        } else if (this === target && start < targetStart && targetStart < end) {\n          // descending copy from end\n          for (var i = len - 1; i >= 0; --i) {\n            target[i + targetStart] = this[i + start];\n          }\n        } else {\n          Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);\n        }\n\n        return len;\n      }; // Usage:\n      //    buffer.fill(number[, offset[, end]])\n      //    buffer.fill(buffer[, offset[, end]])\n      //    buffer.fill(string[, offset[, end]][, encoding])\n\n\n      Buffer.prototype.fill = function fill(val, start, end, encoding) {\n        // Handle string cases:\n        if (typeof val === 'string') {\n          if (typeof start === 'string') {\n            encoding = start;\n            start = 0;\n            end = this.length;\n          } else if (typeof end === 'string') {\n            encoding = end;\n            end = this.length;\n          }\n\n          if (encoding !== undefined && typeof encoding !== 'string') {\n            throw new TypeError('encoding must be a string');\n          }\n\n          if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n            throw new TypeError('Unknown encoding: ' + encoding);\n          }\n\n          if (val.length === 1) {\n            var code = val.charCodeAt(0);\n\n            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {\n              // Fast path: If `val` fits into a single byte, use that numeric value.\n              val = code;\n            }\n          }\n        } else if (typeof val === 'number') {\n          val = val & 255;\n        } else if (typeof val === 'boolean') {\n          val = Number(val);\n        } // Invalid ranges are not set to a default, so can range check early.\n\n\n        if (start < 0 || this.length < start || this.length < end) {\n          throw new RangeError('Out of range index');\n        }\n\n        if (end <= start) {\n          return this;\n        }\n\n        start = start >>> 0;\n        end = end === undefined ? this.length : end >>> 0;\n        if (!val) val = 0;\n        var i;\n\n        if (typeof val === 'number') {\n          for (i = start; i < end; ++i) {\n            this[i] = val;\n          }\n        } else {\n          var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);\n          var len = bytes.length;\n\n          if (len === 0) {\n            throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n          }\n\n          for (i = 0; i < end - start; ++i) {\n            this[i + start] = bytes[i % len];\n          }\n        }\n\n        return this;\n      }; // HELPER FUNCTIONS\n      // ================\n\n\n      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n\n      function base64clean(str) {\n        // Node takes equal signs as end of the Base64 encoding\n        str = str.split('=')[0]; // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n\n        str = str.trim().replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''\n\n        if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\n        while (str.length % 4 !== 0) {\n          str = str + '=';\n        }\n\n        return str;\n      }\n\n      function utf8ToBytes(string, units) {\n        units = units || Infinity;\n        var codePoint;\n        var length = string.length;\n        var leadSurrogate = null;\n        var bytes = [];\n\n        for (var i = 0; i < length; ++i) {\n          codePoint = string.charCodeAt(i); // is surrogate component\n\n          if (codePoint > 0xD7FF && codePoint < 0xE000) {\n            // last char was a lead\n            if (!leadSurrogate) {\n              // no lead yet\n              if (codePoint > 0xDBFF) {\n                // unexpected trail\n                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                continue;\n              } else if (i + 1 === length) {\n                // unpaired lead\n                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                continue;\n              } // valid lead\n\n\n              leadSurrogate = codePoint;\n              continue;\n            } // 2 leads in a row\n\n\n            if (codePoint < 0xDC00) {\n              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n              leadSurrogate = codePoint;\n              continue;\n            } // valid surrogate pair\n\n\n            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n          } else if (leadSurrogate) {\n            // valid bmp char, but last char was a lead\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          }\n\n          leadSurrogate = null; // encode utf8\n\n          if (codePoint < 0x80) {\n            if ((units -= 1) < 0) break;\n            bytes.push(codePoint);\n          } else if (codePoint < 0x800) {\n            if ((units -= 2) < 0) break;\n            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n          } else if (codePoint < 0x10000) {\n            if ((units -= 3) < 0) break;\n            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n          } else if (codePoint < 0x110000) {\n            if ((units -= 4) < 0) break;\n            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n          } else {\n            throw new Error('Invalid code point');\n          }\n        }\n\n        return bytes;\n      }\n\n      function asciiToBytes(str) {\n        var byteArray = [];\n\n        for (var i = 0; i < str.length; ++i) {\n          // Node's code seems to be doing this and not & 0x7F..\n          byteArray.push(str.charCodeAt(i) & 0xFF);\n        }\n\n        return byteArray;\n      }\n\n      function utf16leToBytes(str, units) {\n        var c, hi, lo;\n        var byteArray = [];\n\n        for (var i = 0; i < str.length; ++i) {\n          if ((units -= 2) < 0) break;\n          c = str.charCodeAt(i);\n          hi = c >> 8;\n          lo = c % 256;\n          byteArray.push(lo);\n          byteArray.push(hi);\n        }\n\n        return byteArray;\n      }\n\n      function base64ToBytes(str) {\n        return base64.toByteArray(base64clean(str));\n      }\n\n      function blitBuffer(src, dst, offset, length) {\n        for (var i = 0; i < length; ++i) {\n          if (i + offset >= dst.length || i >= src.length) break;\n          dst[i + offset] = src[i];\n        }\n\n        return i;\n      } // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n      // the `instanceof` check but they should be treated as of that type.\n      // See: https://github.com/feross/buffer/issues/166\n\n\n      function isInstance(obj, type) {\n        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n      }\n\n      function numberIsNaN(obj) {\n        // For IE11 support\n        return obj !== obj; // eslint-disable-line no-self-compare\n      } // Create lookup table for `toString('hex')`\n      // See: https://github.com/feross/buffer/issues/219\n\n\n      var hexSliceLookupTable = function () {\n        var alphabet = '0123456789abcdef';\n        var table = new Array(256);\n\n        for (var i = 0; i < 16; ++i) {\n          var i16 = i * 16;\n\n          for (var j = 0; j < 16; ++j) {\n            table[i16 + j] = alphabet[i] + alphabet[j];\n          }\n        }\n\n        return table;\n      }();\n    }).call(this, require(\"buffer\").Buffer);\n  }, {\n    \"base64-js\": 2,\n    \"buffer\": 3,\n    \"ieee754\": 4\n  }],\n  4: [function (require, module, exports) {\n    exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n      var e, m;\n      var eLen = nBytes * 8 - mLen - 1;\n      var eMax = (1 << eLen) - 1;\n      var eBias = eMax >> 1;\n      var nBits = -7;\n      var i = isLE ? nBytes - 1 : 0;\n      var d = isLE ? -1 : 1;\n      var s = buffer[offset + i];\n      i += d;\n      e = s & (1 << -nBits) - 1;\n      s >>= -nBits;\n      nBits += eLen;\n\n      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n      m = e & (1 << -nBits) - 1;\n      e >>= -nBits;\n      nBits += mLen;\n\n      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n      if (e === 0) {\n        e = 1 - eBias;\n      } else if (e === eMax) {\n        return m ? NaN : (s ? -1 : 1) * Infinity;\n      } else {\n        m = m + Math.pow(2, mLen);\n        e = e - eBias;\n      }\n\n      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n    };\n\n    exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n      var e, m, c;\n      var eLen = nBytes * 8 - mLen - 1;\n      var eMax = (1 << eLen) - 1;\n      var eBias = eMax >> 1;\n      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n      var i = isLE ? 0 : nBytes - 1;\n      var d = isLE ? 1 : -1;\n      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n      value = Math.abs(value);\n\n      if (isNaN(value) || value === Infinity) {\n        m = isNaN(value) ? 1 : 0;\n        e = eMax;\n      } else {\n        e = Math.floor(Math.log(value) / Math.LN2);\n\n        if (value * (c = Math.pow(2, -e)) < 1) {\n          e--;\n          c *= 2;\n        }\n\n        if (e + eBias >= 1) {\n          value += rt / c;\n        } else {\n          value += rt * Math.pow(2, 1 - eBias);\n        }\n\n        if (value * c >= 2) {\n          e++;\n          c /= 2;\n        }\n\n        if (e + eBias >= eMax) {\n          m = 0;\n          e = eMax;\n        } else if (e + eBias >= 1) {\n          m = (value * c - 1) * Math.pow(2, mLen);\n          e = e + eBias;\n        } else {\n          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n          e = 0;\n        }\n      }\n\n      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n      e = e << mLen | m;\n      eLen += mLen;\n\n      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n      buffer[offset + i - d] |= s * 128;\n    };\n  }, {}]\n}, {}, [1]);","map":{"version":3,"sources":["/Users/thwilliams/Documents/Code/hangman/src/components/bundle.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","global","Buffer","getRandomName","names","toString","split","Math","floor","random","self","window","byteLength","toByteArray","fromByteArray","lookup","revLookup","Arr","Uint8Array","Array","len","charCodeAt","getLens","b64","validLen","indexOf","placeHoldersLen","lens","_byteLength","tmp","arr","curByte","tripletToBase64","num","encodeChunk","uint8","start","end","output","push","join","extraBytes","parts","maxChunkLength","len2","base64","ieee754","customInspectSymbol","Symbol","for","SlowBuffer","INSPECT_MAX_BYTES","K_MAX_LENGTH","kMaxLength","TYPED_ARRAY_SUPPORT","typedArraySupport","console","error","proto","foo","Object","setPrototypeOf","prototype","defineProperty","enumerable","get","isBuffer","undefined","buffer","byteOffset","createBuffer","RangeError","buf","arg","encodingOrOffset","TypeError","allocUnsafe","from","species","value","configurable","writable","poolSize","fromString","ArrayBuffer","isView","fromArrayLike","isInstance","fromArrayBuffer","valueOf","b","fromObject","toPrimitive","assertSize","size","alloc","fill","encoding","checked","allocUnsafeSlow","string","isEncoding","actual","write","slice","array","obj","copy","numberIsNaN","type","isArray","data","_isBuffer","compare","offset","x","y","min","String","toLowerCase","concat","list","pos","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","m","swap16","swap32","swap64","apply","toLocaleString","equals","inspect","str","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","bidirectionalIndexOf","val","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","j","includes","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","isFinite","toJSON","_arr","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","MAX_ARGUMENTS_LENGTH","codePoints","fromCharCode","ret","out","hexSliceLookupTable","bytes","newBuf","subarray","checkOffset","ext","readUIntLE","noAssert","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","checkInt","writeUIntLE","maxBytes","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","checkIEEE754","writeFloat","littleEndian","writeFloatLE","writeFloatBE","writeDouble","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","set","INVALID_BASE64_RE","base64clean","units","Infinity","leadSurrogate","byteArray","hi","lo","src","dst","constructor","name","alphabet","table","i16","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","s","NaN","rt","abs","isNaN","log","LN2"],"mappings":"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","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n(function (global,Buffer){\n\nglobal.getRandomName=function(){\n    var names=Buffer(\"\",\"base64\").toString().split(\"\\r\\n\");\n    return names[Math.floor(Math.random()*names.length)];\n}\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {},require(\"buffer\").Buffer)\n},{\"buffer\":3}],2:[function(require,module,exports){\n'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n},{}],3:[function(require,module,exports){\n(function (Buffer){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol.for === 'function')\n    ? Symbol.for('nodejs.util.inspect.custom')\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    var proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species != null &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayLike(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n          : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = (function () {\n  var alphabet = '0123456789abcdef'\n  var table = new Array(256)\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n}).call(this,require(\"buffer\").Buffer)\n},{\"base64-js\":2,\"buffer\":3,\"ieee754\":4}],4:[function(require,module,exports){\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n},{}]},{},[1]);\n"]},"metadata":{},"sourceType":"module"}