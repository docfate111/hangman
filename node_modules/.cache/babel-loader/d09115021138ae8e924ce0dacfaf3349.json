{"ast":null,"code":"var _jsxFileName = \"/Users/thwilliams/Documents/Code/hangman/src/components/hangman.js\";\nimport React, { Component } from 'react';\nimport './hangman.css';\nimport './name';\nimport h0 from './images/h0.png';\nimport h1 from './images/h1.png';\nimport h2 from './images/h2.png';\nimport h3 from './images/h3.png';\nimport h4 from './images/h4.png';\nimport h5 from './images/h5.png';\nimport h6 from './images/h6.png';\nimport { randomName } from './name';\nimport Button from 'react-bootstrap/Button';\n\nclass Hangman extends Component {\n  constructor(props) {\n    super(props);\n\n    this.resetButton = () => {\n      this.setState({\n        mistake: 0,\n        guessed: new Set([]),\n        answer: randomName()\n      });\n    };\n\n    this.handleGuess = e => {\n      let letter = e.target.value;\n      this.setState(st => ({\n        guessed: st.guessed.add(letter),\n        mistake: st.mistake + (st.answer.includes(letter) ? 0 : 1)\n      }));\n    };\n\n    this.state = {\n      mistake: 0,\n      guessed: new Set([]),\n      answer: randomName()\n    };\n  }\n\n  generateButtons() {\n    return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(letter => React.createElement(Button, {\n      variant: this.state.guessed.has(letter) ? \"primary\" : \"secondary\",\n      disabled: this.state.guessed.has(letter),\n      onClick: this.handleGuess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, letter));\n  }\n\n  guessedWord() {\n    return this.state.answer.split(\"\").map(letter => this.state.guessed.has(letter.toUpperCase()) || this.state.guessed.has(letter.toLowerCase()) ? letter : \" _ \");\n  }\n\n  render() {\n    const gameOver = this.state.mistake >= this.props.triesLeft;\n    const isWinner = this.guessedWord().join(\"\") === this.state.answer;\n    let gameStat = this.generateButtons();\n\n    if (isWinner) {\n      gameStat = \"You Won!!!\";\n    }\n\n    if (gameOver) {\n      gameStat = \"You Lost!!!\";\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Marvel Character Hangman\"), React.createElement(\"div\", {\n      id: \"tries\",\n      className: \"float-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Tries: \", this.state.mistake), React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      id: \"word\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, gameOver ? this.state.answer : this.guessedWord()), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, gameStat)), React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.props.images[this.state.mistake],\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      className: \"btn btn-info\",\n      onClick: this.resetButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Restart\"));\n  }\n\n}\n\nHangman.defaultProps = {\n  triesLeft: 6,\n  images: [h0, h1, h2, h3, h4, h5, h6]\n};\nexport default Hangman;","map":{"version":3,"sources":["/Users/thwilliams/Documents/Code/hangman/src/components/hangman.js"],"names":["React","Component","h0","h1","h2","h3","h4","h5","h6","randomName","Button","Hangman","constructor","props","resetButton","setState","mistake","guessed","Set","answer","handleGuess","e","letter","target","value","st","add","includes","state","generateButtons","split","map","has","guessedWord","toUpperCase","toLowerCase","render","gameOver","triesLeft","isWinner","join","gameStat","images","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './hangman.css';\nimport './name';\nimport h0 from './images/h0.png';\nimport h1 from './images/h1.png';\nimport h2 from './images/h2.png';\nimport h3 from './images/h3.png';\nimport h4 from './images/h4.png';\nimport h5 from './images/h5.png';\nimport h6 from './images/h6.png';\nimport { randomName } from './name';\nimport Button from 'react-bootstrap/Button';\nclass Hangman extends Component{\n    static defaultProps={\n        triesLeft: 6,\n        images: [h0, h1, h2, h3, h4, h5, h6]\n    }\n    constructor(props){\n        super(props);\n        this.state={\n            mistake: 0,\n            guessed: new Set([]),\n            answer: randomName()\n        }\n    }\n    resetButton = () => {\n        this.setState({\n          mistake: 0,\n          guessed: new Set([]),\n          answer: randomName()\n        });\n      }\n    handleGuess= e => {\n        let letter=e.target.value;\n        this.setState(st => ({\n            guessed: st.guessed.add(letter),\n            mistake: st.mistake+(st.answer.includes(letter) ? 0 : 1)\n        }));\n    }\n    generateButtons(){\n        return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(letter => (\n            <Button variant={(this.state.guessed.has(letter) ? \"primary\" : \"secondary\")}\n            disabled={this.state.guessed.has(letter)}\n            onClick={this.handleGuess}\n            >{letter}</Button>\n        ));\n    }\n    guessedWord(){\n        return this.state.answer.split(\"\").map(letter => this.state.guessed.has(letter.toUpperCase())||this.state.guessed.has(letter.toLowerCase()) ? letter : \" _ \");\n    }\n    render(){\n        const gameOver=this.state.mistake>=this.props.triesLeft;\n        const isWinner = this.guessedWord().join(\"\") === this.state.answer;\n        let gameStat = this.generateButtons();\n        if (isWinner) {\n            gameStat = \"You Won!!!\"\n        }\n        if (gameOver) {\n            gameStat = \"You Lost!!!\"\n        }\n        return (\n            <div>\n                <h1>Marvel Character Hangman</h1>\n                <div id=\"tries\" className=\"float-right\">Tries: {this.state.mistake}</div>\n                <div className=\"text-center\">\n                    <p id=\"word\">{gameOver ? this.state.answer:this.guessedWord()}</p>\n                    <p>{gameStat}</p>\n                    </div>\n                <div className=\"text-center\">\n                    <img src={this.props.images[this.state.mistake]} alt=\"\"/>\n                </div>\n                <button className='btn btn-info' onClick={this.resetButton}>Restart</button>\n            </div>\n        );\n    }\n}\nexport default Hangman;"]},"metadata":{},"sourceType":"module"}