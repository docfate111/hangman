{"ast":null,"code":"var _jsxFileName = \"/Users/thwilliams/Documents/Code/hangman/src/components/hangman.js\";\nimport React, { Component } from 'react';\nimport './hangman.css';\nimport './name';\nimport h0 from './images/h0.png';\nimport h1 from './images/h1.png';\nimport h2 from './images/h2.png';\nimport h3 from './images/h3.png';\nimport h4 from './images/h4.png';\nimport h5 from './images/h5.png';\nimport h6 from './images/h6.png';\nimport { randomName } from './name';\nimport Button from 'react-bootstrap/Button';\n\nclass Hangman extends Component {\n  constructor(props) {\n    super(props);\n    var n = window.possLetters;\n    this.state = {\n      mistake: 0,\n      guessed: n,\n      answer: randomName()\n    };\n    console.log(n);\n  }\n\n  generateButtons() {\n    return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(letter => React.createElement(Button, {\n      variant: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"letter\"));\n  }\n\n  guessedWord() {\n    return this.state.answer.split(\"\").map(letter => this.state.guessed.includes(letter.toUpperCase()) || this.state.guessed.includes(letter.toLowerCase()) ? letter : \" _ \");\n  }\n\n  render() {\n    const gameOver = this.state.mistake >= this.props.triesLeft;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Marvel Character Hangman\"), React.createElement(\"div\", {\n      id: \"tries\",\n      className: \"float-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Tries: \", this.state.mistake), React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      id: \"word\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, gameOver ? this.state.answer : this.guessedWord())), React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.props.images[this.state.mistake],\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    })));\n  }\n\n}\n\nHangman.defaultProps = {\n  triesLeft: 6,\n  images: [h0, h1, h2, h3, h4, h5, h6]\n};\nexport default Hangman;","map":{"version":3,"sources":["/Users/thwilliams/Documents/Code/hangman/src/components/hangman.js"],"names":["React","Component","h0","h1","h2","h3","h4","h5","h6","randomName","Button","Hangman","constructor","props","n","window","possLetters","state","mistake","guessed","answer","console","log","generateButtons","split","map","letter","guessedWord","includes","toUpperCase","toLowerCase","render","gameOver","triesLeft","images","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,eAAP;AACA,OAAO,QAAP;AACA,OAAOC,EAAP,MAAe,iBAAf;AACA,OAAOC,EAAP,MAAe,iBAAf;AACA,OAAOC,EAAP,MAAe,iBAAf;AACA,OAAOC,EAAP,MAAe,iBAAf;AACA,OAAOC,EAAP,MAAe,iBAAf;AACA,OAAOC,EAAP,MAAe,iBAAf;AACA,OAAOC,EAAP,MAAe,iBAAf;AACA,SAASC,UAAT,QAA2B,QAA3B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;AACA,MAAMC,OAAN,SAAsBV,SAAtB,CAA+B;AAK3BW,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,QAAIC,CAAC,GAACC,MAAM,CAACC,WAAb;AACA,SAAKC,KAAL,GAAW;AACPC,MAAAA,OAAO,EAAE,CADF;AAEPC,MAAAA,OAAO,EAAEL,CAFF;AAGPM,MAAAA,MAAM,EAAEX,UAAU;AAHX,KAAX;AAKAY,IAAAA,OAAO,CAACC,GAAR,CAAYR,CAAZ;AACH;;AACDS,EAAAA,eAAe,GAAE;AACb,WAAO,6BAA6BC,KAA7B,CAAmC,EAAnC,EAAuCC,GAAvC,CAA2CC,MAAM,IACpD,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADG,CAAP;AAGH;;AACDC,EAAAA,WAAW,GAAE;AACT,WAAO,KAAKV,KAAL,CAAWG,MAAX,CAAkBI,KAAlB,CAAwB,EAAxB,EAA4BC,GAA5B,CAAgCC,MAAM,IAAI,KAAKT,KAAL,CAAWE,OAAX,CAAmBS,QAAnB,CAA4BF,MAAM,CAACG,WAAP,EAA5B,KAAmD,KAAKZ,KAAL,CAAWE,OAAX,CAAmBS,QAAnB,CAA4BF,MAAM,CAACI,WAAP,EAA5B,CAAnD,GAAuGJ,MAAvG,GAAgH,KAA1J,CAAP;AACH;;AACDK,EAAAA,MAAM,GAAE;AACJ,UAAMC,QAAQ,GAAC,KAAKf,KAAL,CAAWC,OAAX,IAAoB,KAAKL,KAAL,CAAWoB,SAA9C;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,EAEI;AAAK,MAAA,EAAE,EAAC,OAAR;AAAgB,MAAA,SAAS,EAAC,aAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAgD,KAAKhB,KAAL,CAAWC,OAA3D,CAFJ,EAGI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,EAAE,EAAC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAcc,QAAQ,GAAG,KAAKf,KAAL,CAAWG,MAAd,GAAqB,KAAKO,WAAL,EAA3C,CADJ,CAHJ,EAMI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,GAAG,EAAE,KAAKd,KAAL,CAAWqB,MAAX,CAAkB,KAAKjB,KAAL,CAAWC,OAA7B,CAAV;AAAiD,MAAA,GAAG,EAAC,EAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CANJ,CADJ;AAYH;;AArC0B;;AAAzBP,O,CACKwB,Y,GAAa;AAChBF,EAAAA,SAAS,EAAE,CADK;AAEhBC,EAAAA,MAAM,EAAE,CAAChC,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB;AAFQ,C;AAsCxB,eAAeG,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport './hangman.css';\nimport './name';\nimport h0 from './images/h0.png';\nimport h1 from './images/h1.png';\nimport h2 from './images/h2.png';\nimport h3 from './images/h3.png';\nimport h4 from './images/h4.png';\nimport h5 from './images/h5.png';\nimport h6 from './images/h6.png';\nimport { randomName } from './name';\nimport Button from 'react-bootstrap/Button';\nclass Hangman extends Component{\n    static defaultProps={\n        triesLeft: 6,\n        images: [h0, h1, h2, h3, h4, h5, h6]\n    }\n    constructor(props){\n        super(props);\n        var n=window.possLetters;\n        this.state={\n            mistake: 0,\n            guessed: n,\n            answer: randomName()\n        }\n        console.log(n);\n    }\n    generateButtons(){\n        return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(letter => (\n            <Button variant=\"primary\">letter</Button>\n        ));\n    }\n    guessedWord(){\n        return this.state.answer.split(\"\").map(letter => this.state.guessed.includes(letter.toUpperCase())||this.state.guessed.includes(letter.toLowerCase()) ? letter : \" _ \");\n    }\n    render(){\n        const gameOver=this.state.mistake>=this.props.triesLeft;\n        return (\n            <div>\n                <h1>Marvel Character Hangman</h1>\n                <div id=\"tries\" className=\"float-right\">Tries: {this.state.mistake}</div>\n                <div className=\"text-center\">\n                    <p id=\"word\">{gameOver ? this.state.answer:this.guessedWord()}</p>\n                    </div>\n                <div className=\"text-center\">\n                    <img src={this.props.images[this.state.mistake]} alt=\"\"/>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Hangman;"]},"metadata":{},"sourceType":"module"}